/*
 * runWF_.h
 *
 *  Created on: Oct 11, 2013
 *      Author: sridhara
 */

#ifndef WF_TEST_H_
#define WF_TEST_H_

#include "Lib/Math/UniformRandomValue.h"
//#include "Lib/PAL/PAL_Lib.h"
#if defined(PLATFORM_LINUX)
#include "Platform/linux/Waveform/WF_AlwaysOn_Linux.h"
#else
#include "Platform/dce/Waveform/AlwaysOnDCE/WF_AlwaysOn_DCE.h"
#endif
#include <Sys/Run.h>

using namespace PAL;
using namespace Waveform;


#define PayloadSize 948 //+16
struct MyMsg {
  uint16_t seqNo;
  uint64_t senderID;
  uint8_t data[PayloadSize];
};

class WF_Test{

  Waveform::WF_Attributes wfAttrib;
  WF_Message_n64_t myBuffer;
  uint16_t maxPayloadSize;
  //Message_n64_t& sendMsg = myBuffer;
  WF_Message_n64_t *sendMsg;
  TimerDelegate *timerDelegate;
  Timer *timer;
  uint16_t seqNumber;
  UniformRandomValue *rndDouble;

public:
	//Handlers *handlers;
	Delegate<void, WF_DataNotifierParam_n64_t> *ackDelegate;
	Delegate<void, WF_Message_n64_t&> *recvDelegate;

	Waveform_I<uint64_t> *wf;

	WF_Test();
	void Execute(RuntimeOpts *opts);
	void Start();

	void Timer_Handler(uint32_t event);
	void SendAck_Handler(WF_DataNotifierParam_n64_t& ack);
	void Recv_Handler(WF_Message_n64_t& msg);
};

//int testWF(int argc, char* argv[]);

#endif /* WF_TEST_H_ */
