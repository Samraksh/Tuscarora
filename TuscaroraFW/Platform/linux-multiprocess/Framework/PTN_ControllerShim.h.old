#ifndef PTN_CONTROLLER_SHIM_H_
#define PTN_CONTROLLER_SHIM_H_

#include <Base/FrameworkTypes.h>
#include <Lib/Shims/Sockets/SocketServer.h>
#include <Platform/SocketShim.h>
#include <Lib/KernalSignals/IO_Signals.h>
#include <Framework/Core/DataFlow/CoreTypes.h>
#include <Platform/linux/Pattern/PatternShimMessages.h>
#include <Framework/PWI/FrameworkBase.h>

using namespace Types;
using namespace Lib::Shims;
using namespace Core::Dataflow;

#define MAX_FW_SOC_READ_SIZE 4096

class PTN_ControllerShim {
    Framework_I *fi;

    SocketId_t ptnMasterSocket;
	SocketServer *master;
	//IO_Signals *ioSig;
	int16_t noOfWaveforms;
	char readBuf[MAX_FW_SOC_READ_SIZE];
	SocketSignalDelegate_t *del;
	BSTMapT<PatternId_t, SocketId_t> ptnToSockIdMap;
	//WaveformMap_t *ptnIdMap;
	//BSTMapT<int32_t, Waveform_I<uint64_t>* > *ptnSockMap;
public:
	void SetFrameworkPtr(Framework_I *_fi);
	PTN_ControllerShim();
	void OnSignal(int32_t sockfd);
	SocketId_t NewConnection();
	void OnRecv (int sockfd);
	bool Cleanup (int sockfd);
	//bool Deserialize (char * buf, uint32_t size, int32_t sockfd);
	bool Deserialize (PTN2FWMessages& ptn2fwmsg, int32_t sockfd);
	void InitPattern(PatternId_t wid, int32_t sock);
	bool SendMsg2Pattern(PatternId_t pid, uint8_t* buf, int32_t size);
private:
	void PrintMsg(char *buf, uint32_t size);
};


#endif //PTN_CONTROLLER_SHIM_H_
