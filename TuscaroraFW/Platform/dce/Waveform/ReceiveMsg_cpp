#include "ReceiceMsg.h"
#include "Waveform_Dce_I.h"

#include <arpa/inet.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <net/if.h>
#include <sys/ioctl.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <endian.h>
#include <netpacket/packet.h>
#include <netinet/ether.h>
#include <signal.h>
#include <fcntl.h>
#include <netdb.h>
#include <ifaddrs.h>

// extern bool DBG_WAVEFORM; // set in Lib/Misc/Debug.cpp

namespace Waveform {
  /*For debugging purpose, Get coordinate information of node*/
  uint32_t getenv_uint32_t(const char *s){
      double x=atof(getenv(s));
      return static_cast<uint32_t>(x);
  }
  uint32_t x(){return getenv_uint32_t("CURX");}
  uint32_t y(){return getenv_uint32_t("CURY");}

  
  //unsigned char sendbuf[16][BUF_SIZE];  //Each wavefrom needs separate buffer.
  unsigned char rcvbuf[BUF_SIZE]; //Each wavefrom needs separate buffer.
  int32_t sockfd[MAX_WAVEFORMS];
  char ifName[IFNAMSIZ];
  struct ifreq if_idx;
  struct ifreq if_mac;
  uint32_t protocol;
  uint32_t rcvNumber;

  //signal stuff
  sigset_t recv_mask;
  struct sigaction recv_sa;
  Waveform_Dce_I *myWFPtr[MAX_WAVEFORMS];


  void PrintMsg(int msglen, int rcvNumber, uint8_t * msg) {
    Debug_Printf(DBG_WAVEFORM,"WF_AlwaysON_DCE:: Rcv Message: %d of size %d : ",rcvNumber,msglen);
    for (int i = WF_HDR_SIZE; i< msglen; i++){
	  printf("%X ",msg[i]);
    }
    printf("\n");
  }

/***********************************************************************************************
* Recieve Message
*
*
*************************************************************************************************/
void ReceiveMsg(int sig)
{
    //if(sig > -1) {
    //Debug::PrintTimeMilli();
    //Debug_Printf( DBG_WAVEFORM, ("Handling recv signal: %d\n", sig);
    //}
    //socklen_t saddr_size; 
    //struct sockaddr saddr;
    //saddr_size = sizeof saddr;
    //int msglen=recvfrom(sockfd, rcvbuf, MAX_MAC_PACKET_SIZE, 0, &saddr, &saddr_size);
    Debug_Printf(DBG_WAVEFORM, "Received message from other node\n");
    for(int wfid = 0; wfid < MAX_WAVEFORMS; wfid++) {
        if(sockfd[wfid] == 0) {continue;}
        int cont = 1;
        while(cont == 1){
            int msglen=recv(sockfd[wfid], rcvbuf, BUF_SIZE, 0);
            cont = 0;
            if(msglen < 0){
                if(cont==0){
                     Debug_Printf(DBG_WAVEFORM,"recv failed: Got a signal but reading failed\n");fflush(stdout);
                }
                //return;//continue;
                continue;
            }else{
                //Waveform recieved message. Now pass message to corresponding AlwaysOn_DCE object
                //printf("Number of destination is %d\n",((WF_Message_n64_t*) rcvbuf)->GetNumberOfDest());
                Debug_Printf(DBG_WAVEFORM, "waveform %d got message. Process it\n",wfid);    
                unsigned char* buf = new unsigned char[BUF_SIZE];
                memcpy(buf, rcvbuf, BUF_SIZE);
                Debug_Printf(DBG_WAVEFORM,"AlwaysOnDCE::Address of buf in RecvMsg is %p\n",buf);
                myWFPtr[wfid]->ProcessIncomingMessage(wfid, msglen, buf); 
           }
        }//end while
    }//end for
}//end method

}//End namespace
