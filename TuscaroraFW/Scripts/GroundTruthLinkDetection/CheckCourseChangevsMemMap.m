%This script compares the outputs CourseChangeNotifier and the data obtained from
%memory mapping method and the data to compare the time difference in detecting the
%changes in the list of neighbors.
%
%
% Author            : Bora Karaoglu
% Last Update by    : Bora Karaoglu
% Last Update date  : 08/05/2014 2:35PM

%% Input:
% nameofCourseChangemat : name of the MATLAB workspace file storing the course change notifier data
% nameofthememorymapmat : name of the MATLAB workspace file storing the
% memory map reporting data
%
%% Output:
% Difference in time of LineEstablishments
% CNvsNL_linkest =
% CNvsNL_linkbre =
% LDvsNL_lineest =
% LDvsNL_linebre =
% CNvsLD_lineest =
% CNvsLD_linebre =
%% Notes
%There is a problem with the locations in the memory map data. This can
%observer in 100n120s\allnodes.txt file. The node's x location abrubtly is
%reported as 0. This is probably due to mismatched in read bytes. This
%might have a potential effect on the statistics generated by the MPP file as well.

% This file is CheckCoursevsMemMap as to discard the link establishments at
% t = 0 since these establishments do not reflect true behavior of link
% detection. In fact any value below t=10 is discarded as this period is
% considered to be the initializatio period.

% Similiarly in calculating the link durations we discard the last link
% establishment that does not have a link breakage.

%% Input
clear all;
clc;
close all;
load('SimulationInfo.mat');
t_init = 10;
threshold = 10; % the maximum difference between the LD reported times and the CN reported times
%% Initialization
S = load(nameofCourseChangemat, 'Cells4EaBTime');
CN_Cells4EaBTime = S.Cells4EaBTime; %Link Establishments and Breakages course change notifier data
S = load(nameofthememorymapmat, 'LD_Cells4EaBTime');
LD_Cells4EaBTime = S.LD_Cells4EaBTime;% Link Establishments and Breakages based on link detection algorithm reporting
%% Initialization
LDvsCN_link_LET = [];
LDvsCN_link_LBT = [];

fake_LET = nan(3,0);
fake_LBT = nan(3,0);
fake_duration = nan(3,0);
missed_LET = nan(3,0);
missed_LBT = nan(3,0);
%% Processing
N = size(CN_Cells4EaBTime,1);

for i = 1:N
    for j = 1:N
        CN_EaBTime = CN_Cells4EaBTime{min(i,j),max(i,j)};
        LD_EaBTime = LD_Cells4EaBTime{i,j};
        CN_LET = CN_EaBTime(1:2:end);
        CN_LBT = CN_EaBTime(2:2:end);
        LD_LET = LD_EaBTime(1:2:end);
        LD_LBT = LD_EaBTime(2:2:end);
        
        if( numel(CN_EaBTime) - numel(LD_EaBTime)~=0  ),%Dummy breakpoint
            a = 2;
        end
      
        fLET = [];
        fLBT = [];
      %Handle LETS  
        if(numel(CN_LET) == 0 ) % All discovered LD_LETs are fake
            m2add = LD_LET;
            if numel(m2add>0) 
                fLET = m2add;
                fake_LET = [fake_LET [repmat(i,size(m2add));repmat(j,size(m2add));m2add]]; 
            end
        elseif(numel(LD_LET) == 0) %  All LETs are missed by LD 
            m2add = CN_LET;
            if numel(m2add>0)
                missed_LET = [ missed_LET [repmat(i,size(m2add));repmat(j,size(m2add));m2add] ]; 
            end
        elseif(numel(CN_LET)>=0 && numel(LD_LET)>=0)
            % Match the LDs and CNs for LET
            %Select numel(LD_LET) many CNs that are smaller than LD_LETs
            %and clos_LET to each entry
            compmat = repmat(LD_LET',[1 numel(CN_LET)]) - repmat(CN_LET,[numel(LD_LET) 1]);
            compmat(compmat<0) = Inf;
            [~,I_CN] = min( compmat  ,[],2 );
            u_CN_LET = CN_LET(unique(I_CN));
            %Save missed LETs
            m2add = setdiff(CN_LET, u_CN_LET);
            if numel(m2add>0), 
                missed_LET = [ missed_LET [repmat(i,size(m2add));repmat(j,size(m2add));m2add] ];
            end
            %Select numel(u_CN_LET) many LD_LETs that are clos_LET to and bigger than   u_CN_LET
            compmat = repmat(u_CN_LET',[1 numel(LD_LET)]) - repmat(LD_LET,[numel(u_CN_LET) 1]);
            compmat(compmat>0) = -Inf;
            [~,I_LD] = max( compmat  ,[],2 );
            u_LD_LET =  LD_LET(unique(I_LD));
            %Save fake LETs
            m2add = setdiff(LD_LET, u_LD_LET);
            fLET = m2add;
            if numel(m2add>0), fake_LET = [fake_LET [repmat(i,size(m2add));repmat(j,size(m2add));m2add]]; end
            
            %Save the differences between LD and CN
            ind_init = (u_CN_LET>t_init);
            m2add = (u_LD_LET(ind_init) - u_CN_LET(ind_init));
            LDvsCN_link_LET = [ LDvsCN_link_LET m2add ];
            if nnz(m2add==0.15)
                disp('Warning: LDvsCN_link_LET == 0.15')
            end
        end
        
      %Handle LBTS  
        if(numel(CN_LBT) == 0 ) % % All discovered LD_LBTs are fake 
            m2add = LD_LBT;
            if numel(m2add>0) 
                fLBT = m2add;
                fake_LBT = [fake_LBT [repmat(i,size(m2add));repmat(j,size(m2add));m2add]]; 
            end
        elseif(numel(LD_LBT) == 0) % All LBTs are missed by LD
            m2add = CN_LBT;
            if numel(m2add>0)
                missed_LBT = [ missed_LBT [repmat(i,size(m2add));repmat(j,size(m2add));m2add] ]; 
            end
        elseif(numel(CN_LBT)>=0 && numel(LD_LBT)>=0)
            % Match the LDs and CNs for LBT
            %Select numel(LD_LBT) many CNs that are smaller than LD_LBTs
            %and clos_LBT to each entry
            compmat = repmat(LD_LBT',[1 numel(CN_LBT)]) - repmat(CN_LBT,[numel(LD_LBT) 1]);
            compmat(compmat<0) = Inf;
            [~,I_CN] = min( compmat  ,[],2 );
            u_CN_LBT = CN_LBT(unique(I_CN));
            %Save missed LBTs
            m2add = setdiff(CN_LBT, u_CN_LBT);
            if numel(m2add>0), missed_LBT = [ missed_LBT [repmat(i,size(m2add));repmat(j,size(m2add));m2add] ];end
            %Select numel(u_CN_LBT) many LD_LBTs that are clos_LBT to and bigger than   u_CN_LBT
            compmat = repmat(u_CN_LBT',[1 numel(LD_LBT)]) - repmat(LD_LBT,[numel(u_CN_LBT) 1]);
            compmat(compmat>0) = -Inf;
            [~,I_LD] = max( compmat  ,[],2 );
            u_LD_LBT =  LD_LBT(unique(I_LD));
            %Save fake LBTs
            m2add = setdiff(LD_LBT, u_LD_LBT);
            fLBT = m2add;
            if numel(m2add>0), fake_LBT = [fake_LBT [repmat(i,size(m2add));repmat(j,size(m2add));m2add]]; end
            
            %Save the differences
            ind_init = (u_CN_LBT>t_init);
            m2add = (u_LD_LBT(ind_init) - u_CN_LBT(ind_init)) ; 
            LDvsCN_link_LBT = [ LDvsCN_link_LBT m2add ];
        end
        
        %Calculate mean fake duration
        if numel(fLET)>0 
            m2add = (fLET - fLBT);
            fake_duration = [fake_duration [repmat(i,size(m2add)); repmat(j,size(m2add)); m2add]];
        end
    end
end


%% Output
save('CourseChangevsMemMap.mat'); % ...
%

